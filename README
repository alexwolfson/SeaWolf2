SeaWolf README
===================

Summary:
--------

This project is created to provide an open source appliation for
the different aspects of Apnea training. It shall provide at least CO2 tables, O2 tables and apnea walk.
Heart rate traking is  supported.

Apnea:
------

I became interested in apnea since the adge of 10 when went to vacation on the Black See with my parents.
Somebody gave me a mask to try.
In modern days many years later I was influenced by several people, but the biggest credit goes to 
Nick Fazah (http://www.ecdivers.com) and 
Aharon Solomons (http://freedivers.net)


Software Architecture overvew:
------------------------------

I started with using V-Play (http://v-play.net/) 2D games dvelopment toolkit, but then switched to pure QML Qt 5.7, 
  when ChartView was introduced in 5.7 . It sits on top of Qt/QML 5.7+ .
Among other things, I used this app development as a way to become proficient with QML/Qt development.

To preserve configurations/results JSON is used so far (I might switch to YAML or Database later), but for start choice seems natural,
because of the Javascript nature of QML

For application configuration saved in JSON

{"name": string, "birthdate": date, "gender": ["M", "F"], "best": time}

For sessions configurations saving in JSON

{"session":"Name"
   [
      {"breath": seconds, "hold": seconds, "walk":seconds},
      {"breath": seconds, "hold": seconds, "walk":seconds},
      ...
   ]
}
Results saving
{
"session":name,
"when":date-time
events:["EndOfMeditativeZone", "EndOfComfortZone, "Contraction", "EndOfWalk"]
"events":[Number1:time, Number2:time]
"pulse":[number,number, ...]
}
in events time is the time from the start

For the result saving in JSON

{ "session": "Name", "date": data_time,
[
   {"breath: seconds, "heartrate":[number,number,...]},
   {"hold": seconds, "heartrate":[number,number,...]},
   {"walk": seconds, "steps": number, "heartrate":[number,number,...]}
   {"walkback": seconds, "heartrate":[number,number,...]}
]
}

Gauges have 2 states: "initial" and "stateRun"


Code organisation:
------------------

RunSession is used as an example

qml/common  - basic types, SceneBase among them which specifies
                  visual behaviour but does not use the "Scene" type yet
qml/scenes  - scenes for configuration and run - they are defined using SceneBase

the MenuScene has signals defined in the beginning

// signal indicating that the RunSessionScene should be dislayed
signal runSessionPressed

It also provides buttons. Each button generates signal when pressed
MenuButton {
    text: "Run Session"
    onClicked: runSessionPressed()
    anchors.horizontalCenter: parent.horizontalCenter
}


the Main.qml creates Scenes specify states and provides signal processing that changes states

         MenuScene.qml has signal processing

        onRunSessionPressed: window.state = "runSeries"


in Main.qml
State {
    name: "runSession"
    PropertyChanges {target: runSessionScene; opacity: 1}
    PropertyChanges {target: window; activeScene: runSessionScene}
},

